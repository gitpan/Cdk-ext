</R>Purpose<!R>
The graph widget allows the programmer to create X/Y graphs easily.

</R>Construction Options<!R>
A graph widget is defined using the following syntax. The variable
</B>$graphObject<!B> contains the reference to the graph object.
$graphObject = new Cdk::Graph ( options );
 
The options are defined in the following table.

</U>Option      Default Value       Type       Purpose<!U>
Title       Required            Scalar     The title of the whole graph.
Xtitle      Required            Scalar     The title of the X axis.
Ytitle      Required            Scalar     The title of the Y axis.
Height      Required            Scalar     The height of the graph.
Width       Required            Scalar     The width of the graph.
Xpos        Center              Scalar     This is the position of the window on the X axis.
Ypos        Center              Scalar     This is the position of the window on the Y axis.

</R>Available Methods<!R>
</B>set<!B>
Sets or resets certain attributes or features of the widget. The following
example demonstrates how to call the set method.
$graphObject->set ( options );

The options are defined in the following table.

</U>Option      Default Value       Type       Purpose<!U>
Values       Required           List Ref   This is the list of values to display.
GraphChars   List of Characters Scalar     This is a scalar variable containing characters for each plot point.
StartAtZero  True               Scalar     This states whether the graph should start at zero or not.
Plottype     Line               Scalar     This is the type of graph to draw; line or plot.

</B>draw<!B>
This method draws the object on the screen. The following example demonstrates
how to call the draw method.
$graphObject->draw ( options );

The options are defined in the following table.

</U>Option      Default Value       Type       Purpose<!U>
Box         True                Scalar     Draws the window with a box around it.

</B>erase<!B>
This method removes the object from the screen. This does </B/U>NOT<!B!U> 
destroy the object. The following example demonstrates how to call the erase 
method.
$graphObject->erase ();

</B>raise<!B>
The raise method raises the widget to the top of the screen. This means if there
were any widgets obscuring part of the view, raising the object would bring the
complete object into view. The following example demonstrates how to call the 
raise method.
$graphObject->raise();

</B>lower<!B>
The lower method lowers the object so it doesn't obscure the view of any other 
objects. The following example demonstrates how to call the lower method.
$graphObject->lower();

</B>register<!B>
The register method registers the object to the default screen. This does </R>NOT<!R>
have to be called since the objects are registered automatically. This method
should be called if the </B>unregister<!B> method was called. The following
example demonstrates how to call the register method.
$graphObject->register();

</B>unregister<!B>
The unregister method should be called when a widget, which is part of the
default screen, needs to be taken away temporarily. This does not delete or free
the object, it just unmaps it from any future screen refreshes. The object can
be registered by calling the </B>register<!B> method. The following example
demonstrates how to call the unregister method.
$graphObject->unregister();

</B>getwin<!B>
This method returns a pointer to the window of the object. Not much use for this
yet. It will be useful in the future when the drawing methods are added. The
following example demonstrates how to call the getwin method.
$graphObject->getwin();

</R>Default Key Bindings<!R>
None.

</R>Tips & Tricks<!R>
None.

</R>Physical Restrictions<!R>
</U>Restriction                    Value<!U>
Maximum number of values       10000

</R>Example Use Of The Widget<!R>

#!/usr/local/bin/perl

#
# Load in the Cdk Extension.
#
use Cdk;
Cdk::init();

# Create the graph values.
my @list = qw (50 0 25 66 41 42 30 49 27);
my @colors = qw (1 2 3 4 5 6 7 8 9 );
my $chars = "####**@!X";

# Create the graph object.
my $graph = new Cdk::Graph ('Title' => "<C></3>Total Breakins",
           			'Xtitle' => "<C></2>Count",
           			'Ytitle' => '<C></5>Time Period',
           			'Height' => 20,
           			'Width' => 20);

# Load the object up.
$graph->set ('Values' => \@list,
		'Colors' => \@colors,
		'Graphchars' => $chars);

# Draw the graph.
$graph->draw();

# Wait until someone hits a key.
Cdk::getch();

# End Cdk.
Cdk::end();
<C><#HL(70)>
                       Document Created: June, 1995
                       Document Revised: November, 1995
                       Document Revised: March, 1996
