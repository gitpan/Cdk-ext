</R>Purpose<!R>
The Cdk Dialog widget allows the user to pick from a number of options
using buttons provided. The dialog box presents a message, and a list of 
options using the buttons.

</R>Construction Options<!R>
A dialog widget is defined using the following syntax. The variable 
</B>$dialogObject<!B> contains the reference to the dialog object.
<C></B>$dialogObject = new Cdk::Dialog ( options );

The options are defined in the following table.

</U>Option      Default Value Type       Purpose<!U>
Mesg        Required      List Ref   This is the message which is displayed 
                                     in the dialog box.
Buttons     Required      List Ref   This is a list of the button labels.
Xpos        Center        Scalar     This is the position of the window on
                                     the X axis.
Ypos        Center        Scalar     This is the position of the window on
                                     the Y axis.
Highlight   Reverse       Scalar     The highlight attribute of the
                                     currently selected button.
Separator   True          Scalar     This Boolean value states whether a
                                     separator will be drawn between the
                                     message and the buttons.
Box         True          Scalar     This Boolean states whether the dialog
                                     box will have a box drawn around it.
Shadow      False         Scalar     This Boolean states whether the dialog
                                     box will have a shadow on the box.

</R>Available Methods<!R>

</B>activate<!B>
Activation of an object means to make the object available for use. The 
following example demonstrates how to activate a dialog widget.
<C></B>$returnValue = $dialogObject->activate ();

The variable </B>$returnValue<!B> contains an integer value representing which 
button was actually selected. The value starts at zero and goes up.

</B>set<!B>
Sets or resets certain attributes or features of the widget. The following
example demonstrates how to call the set method.
<C></B>$dialogObject->set ( options );
 
The options are defined in the following table.

</U>Option      Default Value Type       Purpose<!U>
Highlight   Required      Scalar      Changes the current highlight attribute.
Separator   Required      Scalar      Changes the current value for the
                                      separator flag.
Box         True          Scalar      Changes the current value for the box
                                      flag.

</B>draw<!B>
This method draws the object on the screen. The following example 
demonstrates how to call the draw method.
<C></B>$dialogObject->draw ( options );
 
The options are defined in the following table.

</U>Option      Default Value Type       Purpose<!U>
Box         True          Scalar       Draws the window with a box.

</B>erase<!B>
This method removes the object from the screen. This does </B/U>NOT<!B!U> destroy
the object. The following example demonstrates how to call the erase 
method.
<C></B>$dialogObject->erase ();

</B>bind<!B>
The bind method binds keys to events. The binding is specific to the 
individual objects. The following example demonstrates how to call the 
bind method.
<C></B>$dialogObject->bind ( options );

The options are defined in the following table.

</U>Option      Default Value       Type       Purpose<!U>
Key         Required          Scalar      This is the character to bind the 
                                          event to.
Function    Required          Scalar      This is the name of the callback 
                                          function.

</B>raise<!B>
The raise method raises the widget to the top of the screen. This means if 
there were any widgets obscuring part of the view, raising the object would
bring the complete object into view. The following example demonstrates how
to call the raise method.
<C></B>$dialogObject->raise();

</B>lower<!B>
The lower method lowers the object so it doesn't obscure the view of any 
other objects. The following example demonstrates how to call the lower 
method.
<C></B>$dialogObject->lower();

</B>register<!B>
The register method registers the object to the default screen. This does </R>NOT<!R>
have to be called since the objects are registered automatically. This method
should be called if the </B>unregister<!B> method was called. The following
example demonstrates how to call the register method.
<C></B>$dialogObject->register();

</B>unregister<!B>
The unregister method should be called when a widget, which is part of the
default screen, needs to be taken away temporarily. This does not delete or
free the object, it just unmaps it from any future screen refreshes. The 
object can be registered by calling the </B>register<!B> method. The 
following example demonstrates how to call the unregister method.
<C></B>$dialogObject->unregister();

</B>getwin<!B>
This method returns a pointer to the window of the object. Not much use for 
this yet. It will be useful in the future when the drawing methods are added.
The following example demonstrates how to call the getwin method.
<C></B>$dialogObject->getwin();

</R>Default Key Bindings<!R>
</U>Key               Action<!U>
Left Arrow        Highlights the button to the left of the currently 
                  highlighted button.
Right Arrow       Highlights the button to the right of the currently 
                  highlighted button.
Tab               Highlights the button to the right of the currently 
                  highlighted button.
Space             Highlights the button to the right of the currently 
                  highlighted button.
Return            Selects the current button and exits the object.
CTRL-N            Selects the current button and exits the object.
CTRL-R            Refreshes the screen.

</R>Tips & Tricks<!R>
<B=*>If you pass the dialog with no message and no separator, the 
     dialog box appears be a tool bar.

</R>Physical Restrictions<!R>
</U>Restriction                    Value<!U>
Maximum message rows.            50
Maximum dialog buttons.          25

</R>Example Use Of The Widget<!R>

#!/usr/local/bin/perl

# Start Cdk
use Cdk;
Cdk::init();

# Create the dialog buttons.
my @buttons = ("</3>Button 1", "</4>Button 2", "</5>Button 3", "</6>Button 4");

# Create the dialog message.
my @mesg = ("<C></2>This should be centered",
		"<L></7>This should be on the left.",
		"<R></3>This should be on the right.");

# Create the dialog object.
my $dialog = new Cdk::Dialog ('Mesg' => \@mesg,
				'Buttons' => \@buttons,
				'Ypos' => "TOP",
				'Highlight' => "A_REVERSE");

# Activate the object.
my $button = $dialog->activate();

# Exit Cdk.
Cdk::end();

# Print out the results.
print "\n\n\n\n";
print "Button Number Selected: $button\n";
<C><#HL(70)>
<C>Document Created: June,     1995
<C>Document Revised: November, 1995
<C>Document Revised: January,  1996
